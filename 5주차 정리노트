제어문: 프로그램의 실행을 인위적으로 조절, 프로그램의 흐름을 제어(이동 또는 반복시킴)
if문: 조건에 따라 그다음 명령 수행을 달리하고자 할 때 사용하는 명령문 
if~else문: 조건식이 참이면 if문 아래 문장을, 거짓이면 else문 아래 문장을 수행, 대등한 조건이 하나가 아니라 여러 개 있는 경우에 사용 

-if문 괄호 사용법 
if(조건식)
  문장1;
if(조건식){
  문장1;
  문장2;
}

if문(재수강 코드 추가)
if (jumsu >= 90 && jumsu < 100)
	printf("%d점은 A학점입니다.\n", jumsu)
else if (jumsu >= 80 && jumsu <= 89)
	printf("%d점은 B학점입니다.\n", jumsu);
else if (jumsu >= 70 && jumsu <= 79)
	printf("%d점은 C학점입니다.\n", jumsu);
else if (jumsu >= 60 && jumsu <= 69)
	printf("%d점은 D학점입니다.\n", jumsu);
else if (jumsu >= 50 && jumsu <= 59)
	printf("%d점은 F학점입니다.\n", jumsu);
else if (jumsu <= 50)
	printf("%d점은 재수강입니다.\n", jumsu);

다중 if문: if문 안에서 또 다른 조건식을 검사하고자 할 때 사용 
- 다중 if문을 사용하지 않고 if문을 사용해서 작성하게 된다면, 더욱 복잡한 코드로 작성해야할 것 같다.

switch~case문: 조건식을 먼저 평가한 뒤 그 식의 값이 case상수와 일치하는 쪽으로 분기하여 해당 명령문을 수행

-switch문 형식
switch(조건식)
{
  case 상숫값1:
    명령문 블록1
    break;
  case 상숫값2:
    명령문 블록2
    break;
  :
  default:
    명령문 블록n
    break;
}

- swicth문은 if문의 조건식과 다르게 반듯이 수식의 값을 넣어야해서 if식 보다 조건을 만들기 어려운 것같다. 
따라서 '점수를 입력받아 학점을 제시하는 프로그램'에서도 if식은 0이하의 수 또는 100이상의 수를 입력한다면 
재입력을 요구하지만, swicth문은 그런 조건을 정하는게 조금 제한이 있는거 같다는 생각이 들었다.

조건 연산자: C언어에서 유일하게 피연산자가 3개인 삼항 연산자와 연산자를 이용하여 프로그램을 제어 
