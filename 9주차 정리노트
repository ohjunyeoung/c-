함수의 장점: 프로그램의 기능과 구조를 한눈에 알아볼 수 있음. 다른 프로그램에서 재사용 할 수 있음.
시스템 라이브러리 함수: 자주 사용하는 유용한함수를 사용자가 바로 이용할 수 있게 C시스템에 미리 만들어 놓은 것
사용자 정의 함수: 사용자 자신이 원하는 기능을 직접 만든 함수

-함수의 정의
함수명: 식별자 작성 규칙에 따라 명명
입력: 인자의 자료형과 개수를 순서대로 작성
반환 값: 함수가 입력을 받아 기능을 수행한 후에 반환되는 결과 값
기능: 함수를 통해 사용자가 구현하려는 내용 대부분을 여기에 기록

함수의 선언: 함수원형(prototype)이라고도 함. 사용자 정의 함수에 무엇이 있는지 알려주며, 함수를 정의하기 전에 선언. 구체적인 인자명을 기록하지 않고 인자의 자료형과 개수만 나타내도 됨.
함수의 호출: 함수가 정의된 형태에 맞추어 입력과 출력을 고려하여 함수를 사용.

_함수 정의 (정수 더하기)_
int SumTwo(int a, int b)
{
	int result;
	result = a + b;
	return result;
}

_함수 정의 (실수 평균)_
float Average(float x, float y)
{
	float z;
	z = (x + y) / 2;
	return z;
}

_소문자를 입력받아 대문자로 변환하기_
#include<stdio.h>

void upper_case(char ch);
int main(void)
{
	char ch1, ch2;
	while ((ch1 = getchar()) != EOF) {
			upper_case(ch1);
	}
	return 0;
}

void upper_case(char ch)
{
	char res;
	if (ch >= 'a' && ch <= 'z')
		res = ch - 32;
	else
		res = ch;
	putchar(res);
}

SumArray()함수
배열: 배열명은 가인자이기 때문에 식별자 작성 규칙에따라 임의로 작성
원소 개수: 일반적으로 배열명에는 빈 대괄호[]를 사용하고 실제 배열의 원소 개수는 두 번째 인자로 표시
내용: 인자로 사용된 배열과 원소 개수를 이용하여 필요한 기능을 작성
반환 값: 함수에서 계산된 결과 값을 반환

배열을 인자로 사용하는 함수의 호출: 배열이 인자인 함수를 호출할 때 배열 부분에 배열명만 넣음.

_배열을 인자로 사용하는 함수_
#include <stdio.h>

int SumArray(int Array[], int Size);

int main(void)
{
	int a[] = { 10, 5, 15, 25 ,7 };
	int Sum;
	Sum = SumArray(a, 5);
	printf("배열 원소의 합: %d\n", Sum);
	return 0;
}

int SumArray(int Array[], int Size)
{
	int result = 0, i;
	for (i = 0; i < Size; i++)
		result += Array[i];
	
	return result;
}

재귀호출(recursion): 함수에서 그 함수를 다시 호출하는 것. 데이터 N개로 이뤄진 문제가 N-1개 문제를 해결하면 간단하게 해결될 때 사용
factorial()함수: 함수에서 자기 자신을 다시 호출. 종료 조건을 결정해야 무한히 반복하지 않음.

_팩토리얼 구하기_
#include <stdio.h>

int factorial(int n);
int main(void)
{
	int fact_num;
	fact_num = factorial(10);

	printf("10 팩토리얼: %d\n", fact_num);

	return 0;
}

int factorial(int n)
{
	if (n <= 1)
		return(1);
	else
		return(n * factorial(n - 1));
}

11. 정수형 배열b[] = {20, 34, 12, 24, 54, 91, 9, 40, 81, 10}의 최대값, 최소값, 평균, 표준편차를 앞의 연습문제에서 만들었던 함수들을 사용하여 계산하고 화면에 출력하는 프로그램을 작성하시오.
#include<stdio.h>

int max(int ary[]);
int min(int ary[]);
float average(int ary[]);

int main(void)
{
	int b[] = { 20, 34, 12, 24, 54, 91, 9, 40, 81, 10 };
	int Max, Min;
	float Average;

	Max = max(b);
	Min = min(b);
	Average = average(b);
	printf("최대값: %d\n", Max);
	printf("최소값: %d\n", Min);
	printf("평균: %.1f\n", Average);
	return 0;
}

int max(int ary[])
{
	int i;
	int num = ary[0];

	for (i = 0; i < 10; i++);
	{
		if (num < ary[i])
			num = ary[i];
	}
	return num;
}
int min(int ary[])
{
	int i;
	int num = ary[0];

	for (i = 0; i < 10; i++)
	{
		if (num > ary[i])
			num = ary[i];
	}
	return num;
}

float average(int ary[])
{
	int i;
	int sum = 0;
	for (i = 0; i < 10; i++)
	{
		sum += ary[i];
	}
	float ave = (float)sum / 10;

	return ave;
}
