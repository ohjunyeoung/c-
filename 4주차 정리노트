연산자: 산술 연산자인 +,-,*,/와 같이 이미 정의된 연산을 수행하는 기호
피연산자: 연산에 참여하는 변수나 값

lvalue와 rvalue 구별 
산술 연산자: 산술 연산을 수행하는 연산자, 연산자가 다루는 피연산자의 개수에 따라 단항 연산자와 이항 연산자로 나뉨
단항 연산자: 피연산자를 1개만 사용하는 산술 연산자
증감 연산자: 오른쪽에서 왼쪽으로 적용, 각각 변숫값을 1씩 증가 또는 감소시키는 ++와 --가 있음, 증감 연산자를 사용하면 연산의 처리 속도가 좀 더 빨라짐

증감 연산자의 사용 예) 
1. b = ++a, b = a+1, a = 11, b = 11
2. b = --a, b = a-1, a = 9, b = 9
3. b = a++, b = a, a = 10+1 (a= 11), b = 10
4. b = a--, b = a, a = 10-1 (a= 9), b = 10

혼자 해보기 4-1 예측) 
08 - a = b++;, a = 10, b = 11
10 - d = ++a;, a = 11, d = 11
13 - a = b + ++d; a = 23,b = 11, d = 12
정답!

이항 연산자: 피연산자가 2개 필요한 산술 연산자, 사칙연산과 나머지 연산자를 포함
나눗셈 연산자: 정수형 변수에 사용하면 몫만 값으로 저장되고 나머지는 없어짐
나머지 연산자: 나머지만 저장(프로그래밍에서 유용하게 사용)

4-3 예측) d = 몫 6 나머지 2, e = 몫 2 나머지 6, g = 몫 2 나머지 1
답 : d = 6, e = 6, g = 2.142857

혼자해보기 4-2 
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	int high, length, area;
	printf("삼각형의 밑변을 입력하시오.\n");
	scanf("%d", &length);
	
	printf("삼각형의 높이를 입력하시오.\n");
	scanf("%d", &high);

	area = length * high / 2;
	printf("삼각형의 넓이는 %d다.\n", area);

	return 0;
} 성공!

관계 연산자: 두 수 사이의 대소 관계와 특정 조건을 검사할 때 사용하는 연산자, 관계가 성립되면 참(true or 1), 성립되지 않으면 거짓(false or 0)으로 표시
예제 4-5: 예제 답엔 결과는 1, 합격이라고 나오지만/ 직접 해봤을땐(점수를 95로 입력한 뒤), 결과는 95점, 합격으로 나온다.

논리 연산자: 조견 여러개를 결합하여 판정하는 연산자, AND, OR, NOT의 논리 연산을 수행, 참일 때는 1로, 거짓일 때는 0으로 결과를 표시
AND: 둘다 참일때(논리곱&&), OR: 둘다 거짓일때(논리합||), NOT: a가 참이면 b가 거짓(논리부정!) 

예제 4-7 
논리 연산 1 && 1 || 0의 결과 : 1
논리 연산 1 && 0 || 1의 결과 : 1
논리 연산 1 && 0 || 0의 결과 : 0
논리 연산 1 && 0 || 0 && 1의 결과 : 0
논리 연산 <1 && 0 > || <0 && 1>의 결과 : 0

예제 4-8 07: 1, 08: 1, 09: 1, 12: 0
정답 07: 1, 08: 0, 09: 1, 12: 1

비트 연산자: 피연산자 정숫값을 비트 단위로 논리 연산을 수행하는 연산자, AND, OR, NOT의 기본 논리식으로 이루어짐

10진수: 0    1    2    3    4    5    6    7    8    9    10 
2진수 : 0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010

데이터가 4비트인 시프트 연산의 예
>> 연산은 비트를 오른쪽으로 옮겨 값을 감소시키고, <<연산은 왼쪽으로 옮겨 값을 증가시킴

콤마 연산자: 수식 2개를 문자 1개로 표현할 때 사용, 연산자 중 우선순위가 가장 낮으며 왼쪽에서 오른쪽으로 수행, 마지막에 수행한 연산의 결과 값을 반환
예제 4-12 예측) x = 15, y = 5 
정답!

축약 연산자: 연산 2개를 동시에 수행하여 값을 할당하는 연산

sizeof 연산자: 변수나 자료형의 크기를 알고 싶을 때 사용
연산자 우선순위: 단항>산술>이동>관계>비트>논리>조건>대입
연산자 우선순위 원칙
()안에 내용을 먼저 처리
단항 연산자를 이항 연산자보다 먼저 처리
증감 연산자는 위치에 따라 처리되는 순서가 다르지만 대게 왼쪽에서 오른쪽으로 수행하는 것이 원칙 


















