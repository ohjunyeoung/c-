연산자: 산술 연산자인 +,-,*,/와 같이 이미 정의된 연산을 수행하는 기호
피연산자: 연산에 참여하는 변수나 값
lvalue와 rvalue 구별 
산술 연산자: 산술 연산을 수행하는 연산자, 연산자가 다루는 피연산자의 개수에 따라 단항 연산자와 이항 연산자로 나뉨
단항 연산자: 피연산자를 1개만 사용하는 산술 연산자
증감 연산자: 오른쪽에서 왼쪽으로 적용, 각각 변숫값을 1씩 증가 또는 감소시키는 ++와 --가 있음, 증감 연산자를 사용하면 연산의 처리 속도가 좀 더 빨라짐

증감 연산자의 사용 예) 
1. b = ++a, b = a+1, a = 11, b = 11
2. b = --a, b = a-1, a = 9, b = 9
3. b = a++, b = a, a = 10+1 (a= 11), b = 10
4. b = a--, b = a, a = 10-1 (a= 9), b = 10

혼자 해보기 4-1 예측) 
08 - a = b++;, a = 10, b = 11
10 - d = ++a;, a = 11, d = 11
13 - a = b + ++d; a = 23,b = 11, d = 12
정답!

이항 연산자: 피연산자가 2개 필요한 산술 연산자, 사칙연산과 나머지 연산자를 포함
나눗셈 연산자: 정수형 변수에 사용하면 몫만 값으로 저장되고 나머지는 없어짐
나머지 연산자: 나머지만 저장(프로그래밍에서 유용하게 사용)

4-3 예측) d = 몫 6 나머지 2, e = 몫 2 나머지 6, g = 몫 2 나머지 1
답 : d = 6, e = 6, g = 2.142857

혼자해보기 4-2 
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	int high, length, area;
	printf("삼각형의 밑변을 입력하시오.\n");
	scanf("%d", &length);
	
	printf("삼각형의 높이를 입력하시오.\n");
	scanf("%d", &high);

	area = length * high / 2;
	printf("삼각형의 넓이는 %d다.\n", area);

	return 0;
} 성공!

관계 연산자: 두 수 사이의 대소 관계와 특정 조건을 검사할 때 사용하는 연산자, 관계가 성립되면 참(true or 1), 성립되지 않으면 거짓(false or 0)으로 표시
예제 4-5 
