1. 데이터 정렬 프로그램
선택 정렬 과정
- 정렬되지 않은 리스트에서 가장 작은 원소를 찾음.
- 앞에서 찾은 원소를 정렬되지 않은 리스트의 첫 번째 원소와 자리를 바꿈.
- 정렬되지 않은 리스트에서 가장 작은 값을 벽 앞의 정렬된 리스트로 넘김
- 가상의 벽을 현재 위치에서 한 칸 뒤로 옮겨 검색 범위를 좁힘.

선택 정렬 함수 소스
void Select_Sort(int* a, int count)
{
	int i, j;
	int min_value, min_index;
	for (i = 0; i < count - 1; i++)
	{
		min_index = i; 
		min_value = a[i];
		for (j = i + 1; j < count; j + +) 
		{
			if (min_value > a[j])
			{
				min_index = j;
				min_value = a[j];
			}
		}
		a[min_index] = a[i];
		a[i] = min_value;
	}
}

버블 정렬 과정
- 정렬되지 않은 리스트의 뒤에서부터 앞으로 값을 하나하나 비교하면서 현재 값보다 작은 값이 나타나면 자리를 바꿈. 현재 값이 더 크거나 같으면 앞의 값이 현재 값이 됨.
- 과정 1을 반복하면 가장 작은 값이 정렬되지 않은 리스트의 맨 앞에 옴.
- 과정 2의 값을 벽 앞 정렬된 리스트로 넘김.
- 가상의 벽을 현재 위치에서 한 칸 뒤로 옮겨 정렬되지 않은 리스트의 범위를 좁힘.

버블 정렬 함수 소스
void Bubble_Sort(int* a, int count)
{
	int i, j;
	int temp;
	for (i = 0; i < count - 1; i + +)
	{
		for (j = 1; j < count - i; j + +) 
		{
			if (a[j - 1] > a[j])
			{
				temp = a[j - 1];
				a[j - 1] = a[j];
				a[j] = temp;
			}
		}
	}
}

<버블 정렬>
정렬 전 데이터
[4][2][20][8][1][33][35][9][6][26]

정렬 후 데이터
[1][2][4][6][8][9][20][26][33][35]

삽입 정렬 과정
- 가상의 벽 바로 뒤의 값을 벽 바로 앞의 값과 비교
- 가상의 벽 뒤의 값이 크면 가상의 벽을 한 칸 뒤로 옮기고 과정 1을 수행
- 가상의 벽 뒤의 값이 작으면 그 값을 정렬된 리스트의 값과 뒤에서부터 비교
- 이동해야 하는 값봗 작은 값을 발견하면 그 값 뒤에 가상의 벽 바로 뒤의 값을 옮김.
- 가상의 벽을 현재 위치에서 한 칸 뒤로 옮겨 정렬되지 않은 리스트의 범위를 좁힘.

삽입 정렬 함수 소스 
void Insert_Sort(int *a, int count)
{
  int i, j;
  int temp;
  for(i = 1; i < count; i+ +) // 전체 루프 반복
  {
    temp = a[i];
    j = i;
    while((a[j-1] > temp) && ( j > 0)) // 원소 삽입 위치 찾기
    {
      a[j] = a[j-1];
      j = j-1;
    }
    a[j] = temp;
  }
}

셸 정렬: 1959년에 만들어진 알고리즘으로 삽입 정렬을 개선한 방법
셸 정렬 과정
- h간격을 설정
- h간격만큼 떨어진 원소를 모은 부분 집합에서 삽입 정렬을 각각 수행
- h간격을 재설정하고 과정 2반복

셸 정렬 함수 소스
void Shell_Sort(int *a, int count)
{
  int i, j, inc, h;
  int temp;
  for(h = count/2; h > 0; h /= 2)
{
  for(i = 0; i < h; i++)
  {for(j = i+ h; j < count; j+= h)
    {temp = a[j];
      inc = j;
      
      while(inc > h-1 && a[inc-h] > temp)
      {
        a[inc] = a[inc-h];
        inc = inc- h;
      }
      a[inc] = temp;
      }
    }
  }
}

퀵 정렬: 1960년에 제안된 방법으로 빠른 속도와 간단한 구현 방법으로 여러 분야에서 많이 사용하는 정렬 알고리즘
퀵 정렬과정
- 기준 원소 피벗을 고른다.
- 피벗을 기준으로 피벗보다 작은 값은 왼쪽으로, 큰 값은 오른쪽으로 이동시킨다.
- 피벗은 가만히 두고 왼쪽과 오른쪽 원소 집합을 독립적으로 다시 퀵 정렬을 한다.(정렬 완료)

퀵 정렬 함수 소스
void Quick_Sort(int* a, int count)
{
	inti, j;
	int v, temp;
	if (count > 1) 
 {
		v = a[count- 1];
		i =-1; //앞쪽
		j = count- 1; //뒤쪽
	for (; ; ) 
  {
			while (a[++i] < v);
			while (a[--j] > v);
			if (i >= j) break;
			temp = a[i];
			a[i] = a[j];
				a[j] = temp;
		}
		temp = a[i];
		a[i] = a[count- 1];
			data[count- 1] = temp;
			Quick_Sort(a,i);
			Quick_Sort(a + i + 1, count-i- 1);
	}
}

