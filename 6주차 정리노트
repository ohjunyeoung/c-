반복문: 동일한 내용을 반복하거나 일정한 규칙으로 반복하는 일을 수행할 때 사용, 프로그램을 좀 더 간결하고 실제적으로 작성할 수 있음.
for문: 특정한 문장을 일정한 횟수만큼 반복시킬 때 사용 

for(초기화; 조건식; 증감식)
{
  명령문1;
  명령문2;
  :
}

일정한 규칙으로 반복하는 for문: 초깃값과 조건은 경우에 따라 다르게 표현 가능 
(for문을 사용하여a~z까지 나열)
#include <stdio.h>
int main(void)
{
  char a; 
  for (a= 'a'; a<='z'; a++)
  {
    printf("%c", a);
  }
  return 0;
}

대문자 소문자로 변환하는 명령어: tolower
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <ctype.h>
  
int main(void)
{
  char a; 
  int b = 'a' - 'A';
  for (a = 'A'; a<= 'Z'; a++)
  {
    printf("%c", a+b);
  }
  return 0;
}

다중 for문: for문이 2개 이상인 것, 실행 순서나 형식은 단일 for문과 같음.
for(초기화; 조건식; 증감식)
{
  for(초기화; 조건식; 증감식)
  {
    명령문 1;
    :
  }
}

(다중 for문 이해하기)
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	int sum, i, j;
	for (i = 1; i <= 5; i++)
	{
		for (j = 1; j <= 5; j++)
		{
			printf("%d:%d \n", i, j);
		}
		printf("\n\n");
	}
	return 0;
}

(예제 6-7 다중 for문을 이용하여 곱하기 표시 증가시키기 실행) 키 아이디어: for(j=1; j <=i; j++)
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	int i, j;
	for (i = 1; i <= 5; i++)
	{
		for (j = 1; j <= i; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	return 0;
}

(예제 6-8 다중 for문을 이용하여 2~100 사이의 소수 구하기) 해석해보기
키아이디어1: if(i%j == 0)
           break; 2로 나누눠서 나머지가 0이면 없애야 소수를 구하는데 더욱 효율적이기 때문.
키아이디어2: if(j==i){
              count++;
              printf("%d%s", i, count %5 ? " ": "\n");
            } 50인 수에서 소수를 구하는데 효율적이기 때문.

while문: 횟수를 정확하게 알지는 못하지만 반복의 조건을 알고 있을 때 사용
while(조건식)
{
  명령문1;
  명령문2;
  :
  증감식
}

while문과 for문의 초기화 위치 비교: for문은 괄호 안에서 초기화를 하지만 while문은 while문 외부에서 초기화를함. 
                                   for문에서도 for문 시작 전에 초기화를 할 수 있으나 일반적이지 않음. 

while문 익히기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	int sum = 0, number = 1;
	printf("1에서 10까지 합을 구합니다.\n");

	while (number <= 10)
	{
		sum += number;
		number++;
	}

	printf("합은 %d입니다.\n", sum);
	return 0;
}

while문 무한 반복(infinite loop): 종료되지 않는 반복문, 무한 반복에서 빠져나오려면 break문을 이용하거나 [shift] + [F5]키를 눌러 디버깅을 강제로 종료.
do~while문: 일반 do안에 있는 명령문을 수행하고 나중에 while문의 조건식을 비교, 적어도 한 번은 명령문을 처리, 마지막에 세미콜론(;)을 반드시 넣어야 함. 

goto문: 명령문의 실행 순서를 프로그래머가 임의로변경하고자 할 때 사용, 실행 순서를 사용자가 지정한 라벨로 이동, 라벨은 다른 명령문 앞에 선언하며, 라벨 다음에 콜론(;)을 넣음.
일반적으로 goto문은 잘 사용하지 않음.
goto 라벨(Label);

continue문: 반복문을 빠져나오지 않고 해당 반복문의 처음으로 프로그램의 흐름을 이동
1~20에서2의 배수이면서 3의 배수인수를 제외하고 출력하는 프로그램
2의 배수 조건: (i % 2) == 0
3의 배수 조건: (i % 3) == 0
두 조건 AND 연산: 2의 배수이면서 3의 배수인 조건: (i % 2) == 0 && (i % 3) == 0 
위 조건이 만족되지 않을 때 값을 출력 
for(i = 1; i <= 20; i++) {
if((i % 2 == 0) && (i % 3 == 0)) continue;
printf("%d", i);
}

203p 6번 문제
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	int num, i;
	num = 1;

	for(i = 1; i <= 1000; i++)
	{
		if (i % 2!= 0 || i % 6 != 0) continue;
		printf("%d: %d\n", num, i);
		num++;
		if (num == 11) break;
	}
	
	return 0;
} 
