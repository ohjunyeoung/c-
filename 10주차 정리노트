지역변수: 실행되는 단위 블록 내에서만 유효, 선언된 블록의 영역을 벗어나면 효력이 없음.
자동변수: 사용자가 초깃값을 지정하지 않으면 시스템에서 자동으로 임의의 값을 할당, 키워드 auto를 변수 앞에 붙여야 자동 지역변수가 됨.
전역변수: 모든 블록에서 사용할 수 있으며 다른 파일에서도 사용 가능, 프로그램이 시작되고 변수가 선언된 후부터 프로그램이 종료할 때까지 변수의 생명력이 유지,
함수의 블록 외부에서 선언

키워드 extern: 전역변수로 선언된 변수를 외부에서 전역변수로 선언하여 사용하고 있음을 알려주는 키워드
// main.c 파일
#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS
#include "myheader.h"

int gVal = 1;
int main(void)
{
	int value = 10;
	printf("지역변수 value 값은 %d이다.\n", value);
	printf("전역변수 gVal 값은 %d이다.\n", gVal);
	
	A();
	
	printf("함수 A( ) 실행 후\n");
	printf("지역변수 value 값은 %d이다.\n", value);
	printf("전역변수 gVal 값은 %d이다.\n", gVal);
	return 0;
}
// myheader.h
void A();
// func.c
// #include "myheader.h"
extern int gVal;
void A()
{
	int value = 20;
	gVal + +;
}

변수의 우선순위 원칙: 지역변수 > 전역변수
변수의 유효 영역과 생명력: 블록에서 선언한 변수의 생명력은 블록에 한정됨.
#include <stdio.h>

void A();
int Number = 1;
int main(void)
{
	int Number = 10;
	printf("지역변수 Number 값은 %d이다.\n", Number);
{
	10 int Number;
	Number = 20;
	printf("블록 안의 지역변수 Number 값은 %d이다.\n", Number);
}
	printf("내부 블록 밖의 Number 값은 %d이다.\n", Number);
	A();
	return 0;
}

void A()
{
	Number++;
	printf("전역변수 Number 값은 %d이다.\n", Number);
}

정적변수: 프로그램의 실행이 끝날 때까지 메모리에 계속 보존되는 변수, 전역변수와 생명력 동일
변수가 사용될 수 있는 유효 영역은 선언되는 위치에 따라 다름.

내부 정적변수: 함수의 내부에서 선언하여 사용, 지역변수 영역에서 쓰면서 프로그램이 종료될 때까지 값을 보존하고 싶은 경우 사용
#include <stdio.h>

void CallNumber();
int main(void)
{
	int i;
	for (i = 0; i < 5; i++)
		CallNumber();
	return 0;
}
void CallNumber()
{
	static int count = 1;
	int number = 1;
	printf("%d번째 호출되었습니다. \n", count++);
	printf("Number 값은 %d입니다. \n\n", number++);
}

레지스터 변수: 연산 속도를 향상하기 위해 cpu 내에 있는 일반 레지스터를 기억 장소로 사용
레지스터 변수의 특징
- 레지스터 변수의 자료형은 int, char, short 및 포인터형만 사용할 수 있음
- 레지스터의 변수는 cpu의 렞스터에 저장되므로 처리 속도가 일반 변수보다 빠름.
- 반복문의 반복 횟수를 결정하는 변수(첨자)를 레지스터 변수로 사용하는 경우가 많음.
#include <stdio.h>

int main(void)
{
	register int count = 1;
	int result = 0;

	for (count = 1; count <= 5; count + +)
	result += count;

	printf("1부터 5까지 합은 %d다.\n", result);
	return 0;
}
